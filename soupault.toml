[settings]
# Soupault version that the config was written/generated for
# Trying to process this config with an older version will result in an error message
soupault_version = "5.1.0"

# Display progress?
verbose = true

# Display detailed debug output?
debug = false

# Where input files (pages and assets) are stored.
site_dir = "site"

# Where the output goes
build_dir = "build"

# Files inside the site/ directory can be treated as pages or static assets,
# depending on the extension.
#
# Files with extensions from this list are considered pages and processed.
# All other files are copied to build/ unchanged.
#
# Note that for formats other than HTML, you need to specify an external program
# for converting them to HTML (see below).
page_file_extensions = ["html", "md"]

# Soupault has built-in support for CommonMark
# If you use Markdown and want to use the built-in parser,
# use this option to specify file extensions
# that you want to be interpreted as Markdown files.
markdown_extensions = ["md"]

# By default, soupault uses "clean URLs",
# that is, $site_dir/page.html is converted to $build_dir/page/index.html
# You can make it produce $build_dir/page.tml instead by changing this option to false
clean_urls = true

# If you set clean_urls=false,
# file names with ".html" and ".htm" extensions are left unchanged.
keep_extensions = ["html", "htm"]

# All other extensions (".md", ".rst"...) are replaced, by default with ".html"
default_extension = "html"

# Page files with these extensions are ignored.
ignore_extensions = ["draft"]

# Soupault can work as a website generator or an HTML processor.
#
# In the "website generator" mode, it considers files in site/ page bodies
# and inserts them into the empty page template stored in templates/main.html
#
# Setting this option to false switches it to the "HTML processor" mode
# when it considers every file in site/ a complete page and only runs it through widgets/plugins.
generator_mode = true

# Files that contain an <html> element are considered complete pages rather than page bodies,
# even in the "website generator" mode.
# This allows you to use a unique layout for some pages and still have them processed by widgets.
complete_page_selector = "html"

# Website generator mode requires a page template (an empty page to insert a page body into).
# If you use "generator_mode = false", this file is not required.
default_template_file = "templates/main.html"

# Page content is inserted into a certain element of the page template.
# This option is a CSS selector that is used for locating that element.
default_content_selector = "main"

# You can choose where exactly to insert the content in its parent element.
# The default is append_child, but there are more, including prepend_child and replace_content
default_content_action = "append_child"

# If a page already has a document type declaration, keep the declaration
keep_doctype = true

# If a page does not have a document type declaration, force it to HTML5
# With keep_doctype=false, soupault will replace existing declarations with it too
doctype = "<!DOCTYPE html>"

# Insert whitespace into HTML for better readability
# When set to false, the original whitespace (if any) will be preserved as is
pretty_print_html = true

# Plugins can be either automatically discovered or loaded explicitly.
# By default discovery is enabled and the place where soupault is looking is the plugins/ subdirectory
# in your project.
# E.g., a file at plugins/my-plugin.lua will be registered as a widget named "my-plugin".
plugin_discovery = true
plugin_dirs = ["plugins"]

# Soupault can cache outputs of external programs
# (page preprocessors and preprocess_element widget commands).
# It's disabled by default but you can enable it and configure the cache directory name/path
caching = true
cache_dir = ".cache"

# Soupault supports a variety of page source character encodings,
# the default encoding is UTF-8
page_character_encoding = "utf-8"


# Custom options that aren't built-ins
[custom_options]
site_url = "https://conflor.es"
site_author = "Eri Pazos Pérez"
site_author_email = "eri@igalia.com"
site_title = "conflores"


# The content model specifies the fields, similar to front matter
[index]
sort_by = "date"
sort_descending = true
sort_type = "calendar"
date_formats = ["%F"]
leaf_file = ".leaf"
extract_after_widgets = ["post-header"]

# These are the fields we extract directly from the HTML content to
# use as metadata
[index.fields]
title = { selector = ["h1#post-title", "h1"], required = true }
content = { selector = ["main"], required = true }
excerpt = { selector = ["#post-excerpt", "p"] }
date = { selector = ["#post-date", "time"], required = true }
tags = { selector = "#post-tags > span", select_all = true }
images = { selector = "img:not(.no-index)", extract_attribute = "src", select_all = true }
images_alt = { selector = "img:not(.no-index)", extract_attribute = "alt", select_all = true }

# Finally, we can create an index view to show all of the blog posts
[index.views.blog]
index_selector = "#blog-index"
section = "blog/"
index_item_template = """
<article class="column blog-index-element {% if "short" in tags %}blog-index-short{% endif %}">
  <header class="row">
    <h2><a href="{{url}}">{{title}}</a></h2>
    <span class="fill"></span>
    <strong>{{date}}</strong>
  </header>
  {% if images %}
    <div class="blog-index-imgs">
      {% for src in images %}<img src="{{src}}" alt="{{images_alt[loop.index-1]}}"/>{% endfor %}
    </div>
  {% endif %}
  <p>{{excerpt}}</p>
  <span class="row">
    <a href="{{url}}">Read more</a>
    <span class="fill"></span>
    {% for tag in tags %}<span>{{tag}}</span>{% endfor %}
  </span>
</article>
"""


# Pages can be further processed with "widgets"

# Header and footer
[widgets.insert-header]
widget = "include"
file = "templates/header.html"
selector = "body"
action = "prepend_child"

[widgets.insert-footer]
widget = "include"
file = "templates/footer.html"
selector = "body"
action = "append_child"

# Page title
[widgets.page-title]
widget = "title"
selector = "h1"
default = "conflores"
append = " &mdash; conflores"

# Post header
[widgets.post-header]
widget = "post-header"
selector = "h1"

# RSS Feed
[widgets.atom]
page = "index.html"
widget = "atom"
feed_file = "atom.xml"
use_section = "blog"

[widgets.atom-web-platform]
page = "index.html"
widget = "atom"
feed_file = "web-platform.xml"
use_section = "blog"
use_tag = "web-platform"

# Table of contents
# [widgets.table-of-contents]
# widget = "toc"
# selector = "post-meta"
# action = "insert_after"
# exclude_page = "index.html"
# min_level = 2
# toc_list_class = "toc"
# heading_links = true
# heading_link_text = "→ "
# use_heading_slug = true
